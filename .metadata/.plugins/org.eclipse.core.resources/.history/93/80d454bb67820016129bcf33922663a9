package nebulous.graphics;

import org.lwjgl.glfw.*;
import org.lwjgl.opengl.GL;

import static org.lwjgl.glfw.GLFW.*;

import org.lwjgl.Version;
import static org.lwjgl.opengl.GL11.*;

import nebulous.utils.Console;

public class Window {
	
	private String TITLE;
	private int WIDTH, HEIGHT;
	private long windowID = 0;
	private boolean resized = false;
	private boolean fullscreen = false;
	private boolean vSync = false;

	public Window() {}
	
	public Window createWindow(int width, int height, String title){
		this.TITLE = title;
		this.WIDTH = width;
		this.HEIGHT = height;
		return this;
	}
	
	private void init(){
		GLFWErrorCallback.createPrint(System.err).set();
		printGLStats();
		
		if (glfwInit()){
			Console.println("GLFWInit() completed successfully...");
		} else {
			Console.printErr("GLFWInit() failed to complete successfully!");
			throw new IllegalStateException("ERROR: Unable to initialize GLFW!");
		}
		
		glfwDefaultWindowHints();
		glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
		glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE);
		glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
        glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
        glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
        glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
        
        if(fullscreen) windowID = glfwCreateWindow(WIDTH, HEIGHT, TITLE, glfwGetPrimaryMonitor(), 0);
        else windowID = glfwCreateWindow(WIDTH, HEIGHT, TITLE, 0, 0);
        
		if(windowID == 0){ throw new RuntimeException("ERROR: Failed to create the GLFW window!");}
		
		GLFWWindowSizeCallback windowSizeCallback = new GLFWWindowSizeCallback() {
			@Override
			public void invoke(long window, int width, int height) {
				Window.this.WIDTH = width;
				Window.this.HEIGHT = height;
				Window.this.resized = true;
			}
		}; 
		
		glfwSetWindowSizeCallback(windowID, windowSizeCallback);
		
		if(!fullscreen){
			GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
	        glfwSetWindowPos(windowID,(vidmode.width() - WIDTH) / 2,(vidmode.height() - HEIGHT) / 2);
		}
		
		glfwMakeContextCurrent(windowID);
		glfwSwapInterval(1);
		
		GL.createCapabilities();
		
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	}
	
	public boolean isResized(){
		return resized;
	}

	public void update(){
		if (resized) {
            glViewport(0, 0, WIDTH, HEIGHT);
            resized = false;
            Console.println("Window Resized: " + HEIGHT + ", " + WIDTH);
        }
	}
	
	public void render(){
		glfwSwapBuffers(windowID);
		glfwPollEvents();
	}
	
	public void vSync(boolean enable){
		if(enable) glfwSwapInterval(1);
		else glfwSwapInterval(0);
	}
	
	public void setVisable(boolean visable){
		if(visable) glfwWindowHint(GLFW_VISIBLE, GLFW_TRUE);
		else glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);
	}
	
	public void setResizable(boolean resizable){
		if(resizable) glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
		else glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
	}
	
	public static void printGLStats(){
        Console.printMOTD(
        " OPENGL: " + glGetString(GL_VERSION) + "\n" +
        " LWJGL: " + Version.getVersion() + "\n" + 
        " GRAPHICS: " + glGetString(GL_RENDERER) + "\n" +
        " VENDORS: " + glGetString(GL_VENDOR) + "\n" +
        " OPERATING SYSTEM: " + System.getProperty("os.name") + "\n" +
        " JAVA VERSION: " + System.getProperty("java.version") + "\n" +
        " CURRENT DIRECTORY: \n" +
        " " + System.getProperty("user.dir")
        );
    }

	public String getTitle() {
		return TITLE;
	}

	public int getWidth() {
		return WIDTH;
	}

	public int getHeight() {
		return HEIGHT;
	}

	public long getWindowID() {
		return windowID;
	}

	public boolean isFullscreen() {
		return fullscreen;
	}

	public void fullscreen(boolean fullscreen) {
		this.fullscreen = fullscreen;
	}

	public boolean isVSync() {
		return vSync;
	}

	public void setVSync(boolean vSync) {
		this.vSync = vSync;
	}

}
