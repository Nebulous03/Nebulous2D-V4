package nebulous.graphics;

import nebulous.main.Game;
import nebulous.utils.math.Matrix4f;

public class RenderEngine {
	
	private static final float DEFAULT_FOV = 80.0f;
	private static final float DEFAULT_Z_NEAR = 0.001f;
	private static final float DEFAULT_Z_FAR = 1000f;
	
	private static float FOV;
	private static float Z_NEAR;
	private static float Z_FAR;
	private static float aspectRatio;
	private static Matrix4f projection;
	
	private static Window window;
	private static Game game;
	
	public RenderEngine(Game game){
		this.game = game;
		this.window = game.getWindow(); // TODO: Move Window in here
		this.FOV = (float) Math.toRadians(DEFAULT_FOV);
		this.Z_NEAR = DEFAULT_Z_NEAR;
		this.Z_FAR = DEFAULT_Z_FAR;
	}
	
	public static void init(){
		aspectRatio = (float) window.getWidth() / window.getHeight();
		projection = new Matrix4f().initPerspective(FOV, aspectRatio, Z_NEAR, Z_FAR);
		
	}
	
	public static void update(){
		window.update();
	}
	
	public static void render(){
		game.render();
		window.render();
	}
	
	public static void renderMesh(Mesh mesh){
		// DO
		// Move stuff from mesh
	}

	public static float getFOV() {
		return FOV;
	}

	public static void setFOV(float fOV) {
		FOV = fOV;
	}

	public static float getZ_NEAR() {
		return Z_NEAR;
	}

	public static void setZ_NEAR(float z_NEAR) {
		Z_NEAR = z_NEAR;
	}

	public static float getZ_FAR() {
		return Z_FAR;
	}

	public static void setZ_FAR(float z_FAR) {
		Z_FAR = z_FAR;
	}

	public static float getDefaultFov() {
		return DEFAULT_FOV;
	}

	public static float getDefaultZNear() {
		return DEFAULT_Z_NEAR;
	}

	public static float getDefaultZFar() {
		return DEFAULT_Z_FAR;
	}

	public static float getAspectRatio() {
		return aspectRatio;
	}

	public static Matrix4f getProjection() {
		return projection;
	}

	public static Window getWindow() {
		return window;
	}

	public static Game getGame() {
		return game;
	}

}
